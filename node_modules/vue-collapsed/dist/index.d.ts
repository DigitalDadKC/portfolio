import { Component } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import { PublicProps } from 'vue';

declare const __VLS_component: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
when: boolean;
baseHeight?: number;
as?: keyof HTMLElementTagNameMap;
}>, {
baseHeight: number;
as: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
collapse: () => void;
expand: () => void;
collapsed: () => void;
expanded: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
when: boolean;
baseHeight?: number;
as?: keyof HTMLElementTagNameMap;
}>, {
baseHeight: number;
as: string;
}>>> & {
onCollapse?: (() => any) | undefined;
onExpanded?: (() => any) | undefined;
onCollapsed?: (() => any) | undefined;
onExpand?: (() => any) | undefined;
}, {
baseHeight: number;
as: keyof HTMLElementTagNameMap;
}, {}>;

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare function __VLS_template(): Readonly<{
    default({ state }: {
        state: TransitionState;
    }): Component;
}> & {
    default({ state }: {
        state: TransitionState;
    }): Component;
};

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare const Collapse: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;

declare type TransitionState = 'expanding' | 'expanded' | 'collapsing' | 'collapsed';

export { }


declare global {
    namespace Cypress {
        interface Chainable {
            mount: typeof mount;
        }
    }
}

